(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('preact')) :
	typeof define === 'function' && define.amd ? define(['preact'], factory) :
	global.preactRichTextArea = factory(global.preact);
}(this, function (preact) { 'use strict';

	var babelHelpers = {};

	babelHelpers.classCallCheck = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	babelHelpers.defineProperty = function (obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	};

	babelHelpers.extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};

	babelHelpers.inherits = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};

	babelHelpers.objectWithoutProperties = function (obj, keys) {
	  var target = {};

	  for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	    target[i] = obj[i];
	  }

	  return target;
	};

	babelHelpers.possibleConstructorReturn = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && (typeof call === "object" || typeof call === "function") ? call : self;
	};

	babelHelpers;

	function __$styleInject(css) {
	  css = css || '';
	  var head = document.head || document.getElementsByTagName('head')[0];
	  var style = document.createElement('style');
	  style.type = 'text/css';
	  if (style.styleSheet){
	    style.styleSheet.cssText = css;
	  } else {
	    style.appendChild(document.createTextNode(css));
	  }
	  head.appendChild(style);
	}
	__$styleInject(".preact-richtextarea{\n\tdisplay:block;\n\twidth:100%;\n\tmin-height:22px;\n\tpadding:2px;\n\tbackground-color:white;\n\tborder:1px solid;\n\tresize:auto;\n\tcursor:text;\n\toverflow:auto;\n}\n\n.preact-richtextarea iframe{\n\tposition:relative;\n\tmargin:0;\n\tpadding:0;\n\twidth:100%;\n\tborder:0 !important;\n\tbackground:none !important;\n\toverflow:hidden;\n}\n\n.preact-richtextarea[is-placeholder] iframe{\n\topacity:0.5;\n}\n");

	var UID = Math.random().toString(32).substring(2);

	var EMPTY_VALUE = '<br>';

	var RichTextArea = (function (_Component) {
		babelHelpers.inherits(RichTextArea, _Component);

		function RichTextArea(props) {
			babelHelpers.classCallCheck(this, RichTextArea);

			var _this = babelHelpers.possibleConstructorReturn(this, _Component.call(this, props));

			_this.componentDidUpdate = _this.componentDidUpdate.bind(_this);
			_this.updateHeight = _this.updateHeight.bind(_this);
			_this.handleEvent = _this.handleEvent.bind(_this);
			_this.doFocus = _this.doFocus.bind(_this);
			return _this;
		}

		RichTextArea.prototype.exec = function exec(command) {
			var doc = this.getDocument();

			for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
				args[_key - 1] = arguments[_key];
			}

			if (doc) return doc[command].apply(doc, args);
		};

		RichTextArea.prototype.execCommand = function execCommand(command) {
			for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
				args[_key2 - 1] = arguments[_key2];
			}

			return this.exec.apply(this, ['execCommand', command].concat(args));
		};

		RichTextArea.prototype.queryCommandState = function queryCommandState(command) {
			return this.exec('queryCommandState', command);
		};

		RichTextArea.prototype.queryCommandValue = function queryCommandValue(command) {
			return this.exec('queryCommandValue', command);
		};

		RichTextArea.prototype.componentDidMount = function componentDidMount() {
			this.updateHeightTimer = setInterval(this.updateHeight, 1000);
		};

		RichTextArea.prototype.componentWillUnmount = function componentWillUnmount() {
			clearInterval(this.updateHeightTimer);
		};

		RichTextArea.prototype.shouldComponentUpdate = function shouldComponentUpdate(_ref) {
			var value = _ref.value;
			var stylesheet = _ref.stylesheet;
			var placeholder = _ref.placeholder;
			var props = babelHelpers.objectWithoutProperties(_ref, ['value', 'stylesheet', 'placeholder']);

			for (var i in props) {
				if (props[i] !== this.props[i]) return true;
			}this.props = babelHelpers.extends({}, this.props, { value: value, placeholder: placeholder, stylesheet: stylesheet });
			this.componentDidUpdate();
			return false;
		};

		RichTextArea.prototype.componentDidUpdate = function componentDidUpdate() {
			clearTimeout(this.updateTimer);
			this.setup();

			var editor = this.getEditor();
			if (!editor) {
				this.editorRetries = (this.editorRetries || 0) + 1;
				this.updateTimer = setTimeout(this.componentDidUpdate, this.editorRetries > 10 ? 100 : 1);
				return;
			}
			this.editorRetries = 0;

			var value = this.props.value || EMPTY_VALUE,
			    stylesheet = this.props.stylesheet,
			    current = editor.innerHTML;

			if (stylesheet !== this.stylesheet) {
				this.setStyleSheet(stylesheet);
			}

			if (this.placeholderShowing === true && current === this.props.placeholder) {
				current = EMPTY_VALUE;
			}
			if (current !== value) {
				editor.innerHTML = value;
			}
			this.updatePlaceholder();
			this.updateHeight();
		};

		RichTextArea.prototype.setStyleSheet = function setStyleSheet(stylesheet) {
			this.stylesheet = stylesheet;
			var doc = this.getDocument(),
			    s = doc.getElementById('prtcss' + UID);
			if (s) s.parentNode.removeChild(s);

			var head = doc.head || doc.getElementsByTagName('head')[0];
			if (!head) head = doc.body.parentNode.insertBefore(doc.createElement('head'), doc.body);

			s = doc.createElement('style');
			s.setAttribute('id', 'prtcss' + UID);
			s.appendChild(doc.createTextNode(stylesheet));
			head.appendChild(s);
		};

		RichTextArea.prototype.setup = function setup() {
			var doc = this.getDocument();
			if (!doc || doc.body && doc.body._hasbeensetup === true) return;

			if (!doc.body) {
				doc.open();
				doc.write('<!DOCTYPE html><html><body contentEditable></body></html>');
				doc.close();
			}
			doc.designMode = 'on';
			doc.documentElement.style.cursor = 'text';
			doc.documentElement.style.overflowY = doc.body.style.overflowY = 'hidden';
			doc.body.style.minHeight = '1.2em';
			doc.body.contentEditable = true;
			doc.body._hasbeensetup = true;
			var win = this.getFrame().contentWindow;
			win.onfocus = win.onblur = win.oninput = win.onchange = this.handleEvent;
			win.onscroll = win.onload = this.updateHeight;
		};

		RichTextArea.prototype.updateHeight = function updateHeight() {
			clearTimeout(this.uht);
			this.uht = null;
			var doc = this.getDocument(),
			    br = doc && doc._br;
			if (!doc) return;
			if (!br) {
				br = doc._br = doc.createElement('div');
				br.style.cssText = 'position:relative;overflow:hidden;clear:both;';
			}
			doc.body.appendChild(br);
			var ph = br.offsetTop + doc.documentElement.offsetHeight - doc.body.offsetHeight;
			doc.body.removeChild(br);

			var frame = this.getFrame();
			if (ph !== frame.offsetHeight) {
				frame.style.height = ph + 'px';
			}
		};

		RichTextArea.prototype.getFrame = function getFrame() {
			return this.base && this.base.firstChild;
		};

		RichTextArea.prototype.getDocument = function getDocument() {
			var frame = this.getFrame();
			return frame && frame.contentWindow && frame.contentWindow.document;
		};

		RichTextArea.prototype.getEditor = function getEditor() {
			var doc = this.getDocument();
			return doc && doc.body;
		};

		RichTextArea.prototype.getHandler = function getHandler(type) {
			for (var i in this.props) {
				if (i.toLowerCase() === 'on' + type) return this.props[i];
			}
		};

		RichTextArea.prototype.handleEvent = function handleEvent(_ref2) {
			var type = _ref2.type;
			var target = _ref2.target;

			var fn = this.getHandler(type),
			    editor = this.getEditor(),
			    value = editor.innerHTML;
			target = editor || target;
			if (type === 'focus' || type === 'blur') {
				this.focussed = type === 'focus';
				this.updatePlaceholder();
				if (type === 'focus') target.focus();
			}
			if (fn) fn({ value: value, type: type, target: target, currentTarget: this });
			if (!this.uht) {
				this.uht = setTimeout(this.updateHeight, 20);
			}
		};

		RichTextArea.prototype.updatePlaceholder = function updatePlaceholder() {
			var placeholder = this.props.placeholder;
			var editor = this.getEditor();
			var value = editor.innerHTML;
			var norm = this.normalizeEmptyValue(value);
			var show = (!norm || norm === EMPTY_VALUE || norm === placeholder) && placeholder && !this.focussed;

			if (show === this.placeholderShowing) return;
			this.placeholderShowing = show;

			if (show) {
				if (!norm) editor.innerHTML = placeholder;
				this.base.setAttribute('is-placeholder', 'true');
			} else {
				if (value === placeholder) editor.innerHTML = EMPTY_VALUE;
				this.base.removeAttribute('is-placeholder');
			}
		};

		RichTextArea.prototype.normalizeEmptyValue = function normalizeEmptyValue(value) {
			return typeof value === 'string' ? value.replace(/^[\s\n]*?(<br\s*?\/?>)?[\s\n]*?$/gi, '') : '';
		};

		RichTextArea.prototype.doFocus = function doFocus(e) {
			var a = this.getEditor();
			if (a) a.focus();
			if (e) return e.preventDefault(), false;
		};

		RichTextArea.prototype.render = function render(_ref3) {
			var _ref4;

			var value = _ref3.value;
			var cl = _ref3.class;
			var className = _ref3.className;
			var placeholder = _ref3.placeholder;
			var stylesheet = _ref3.stylesheet;
			var props = babelHelpers.objectWithoutProperties(_ref3, ['value', 'class', 'className', 'placeholder', 'stylesheet']);

			for (var i in props) {
				if (props.hasOwnProperty(i) && i.match(/^on/i) && typeof props[i] === 'function') delete props[i];
			}return preact.h(
				'richtextarea',
				babelHelpers.extends({ 'class': (_ref4 = {
						'preact-richtextarea': true
					}, babelHelpers.defineProperty(_ref4, cl, cl), babelHelpers.defineProperty(_ref4, className, className), _ref4) }, props, { onFocus: this.doFocus, tabIndex: ' ', 'is-placeholder': !value && !!placeholder || null }),
				preact.h('iframe', null)
			);
		};

		return RichTextArea;
	})(preact.Component);

	return RichTextArea;

}));
//# sourceMappingURL=preact-richtextarea.js.map